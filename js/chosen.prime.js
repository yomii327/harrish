// Chosen, a Select Box Enhancer for jQuery and Protoype
// by Patrick Filler for Harvest, http://getharvest.com
//
// Version 0.9.8
// Full source at https://github.com/harvesthq/chosen
// Copyright (c) 2011 Harvest http://getharvest.com
//
// Changelog:
// [2012-08-02] - Add option to specify a custom value on the fly [Anderson Gr√ºdtner Martins]

// MIT License, https://github.com/harvesthq/chosen/blob/master/LICENSE.md
// This file is generated by `cake build`, do not edit it by hand.
(function() {
  var SelectParser;

  SelectParser = (function() {

    function SelectParser() {
      this.options_index = 0;
      this.parsed = [];
    }

    SelectParser.prototype.add_node = function(child) {
      if (child.nodeName === "OPTGROUP") {
        return this.add_group(child);
      } else {
        return this.add_option(child);
      }
    };

    SelectParser.prototype.add_group = function(group) {
      var group_position, option, _i, _len, _ref, _results;
      group_position = this.parsed.length;
      this.parsed.push({
        array_index: group_position,
        group: true,
        label: group.label,
        children: 0,
        disabled: group.disabled
      });
      _ref = group.childNodes;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        _results.push(this.add_option(option, group_position, group.disabled));
      }
      return _results;
    };

    SelectParser.prototype.add_option = function(option, group_position, group_disabled) {
      if (option.nodeName === "OPTION") {
        if (option.text !== "") {
          if (group_position != null) {
            this.parsed[group_position].children += 1;
          }
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            value: option.value,
            text: option.text,
            html: option.innerHTML,
            selected: option.selected,
            disabled: group_disabled === true ? group_disabled : option.disabled,
            group_array_index: group_position,
            classes: option.className,
            style: option.style.cssText
          });
        } else {
          this.parsed.push({
            array_index: this.parsed.length,
            options_index: this.options_index,
            empty: true
          });
        }
        return this.options_index += 1;
      }
    };

    return SelectParser;

  })();

  SelectParser.select_to_array = function(select) {
    var child, parser, _i, _len, _ref;
    parser = new SelectParser();
    _ref = select.childNodes;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      parser.add_node(child);
    }
    return parser.parsed;
  };

  this.SelectParser = SelectParser;

}).call(this);

/*
Chosen source: generate output using 'cake build'
Copyright (c) 2011 by Harvest
*/


(function() {
  var AbstractChosen, root;

  root = this;

  AbstractChosen = (function() {

    function AbstractChosen(form_field, options) {
      this.form_field = form_field;
      this.options = options != null ? options : {};
      this.set_default_values();
      this.is_multiple = this.form_field.multiple;
      this.setup();
      this.set_default_text();
      this.set_up_html();
      this.register_observers();
      this.finish_setup();
    }

    AbstractChosen.prototype.set_default_values = function() {
      var _this = this;
      this.click_test_action = function(evt) {
        return _this.test_active_click(evt);
      };
      this.activate_action = function(evt) {
        return _this.activate_field(evt);
      };
      this.active_field = false;
      this.mouse_on_container = false;
      this.results_showing = false;
      this.result_highlighted = null;
      this.result_single_selected = null;
      this.allow_single_deselect = (this.options.allow_single_deselect != null) && (this.form_field.options[0] != null) && this.form_field.options[0].text === "" ? this.options.allow_single_deselect : false;
      this.disable_search_threshold = this.options.disable_search_threshold || 0;
      this.search_contains = this.options.search_contains || false;
      this.choices = 0;
      this.single_backstroke_delete = this.options.single_backstroke_delete || false;
      this.max_selected_options = this.options.max_selected_options || Infinity;
      this.allow_custom_value = false;
      return true;
    };

    AbstractChosen.prototype.set_default_text = function() {
      var results_none_found_default;
      if (this.form_field.getAttribute("data-placeholder")) {
        this.default_text = this.form_field.getAttribute("data-placeholder");
      } else if (this.is_multiple) {
        this.default_text = this.options.placeholder_text_multiple || this.options.placeholder_text || "Select Some Options";
      } else if (this.allow_custom_value) {
        this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || "Type or Select an Option";
      } else {
        this.default_text = this.options.placeholder_text_single || this.options.placeholder_text || "Select an Option";
      }
      if (this.allow_custom_value) {
        this.custom_group_text = this.form_field.getAttribute("data-custom_group_text") || this.options.custom_group_text || "Custom Value";
        results_none_found_default = "Add custom value";
      } else {
        results_none_found_default = "No results match";
      }
      return this.results_none_found = this.form_field.getAttribute("data-no_results_text") || this.options.no_results_text || results_none_found_default;
    };

    AbstractChosen.prototype.mouse_enter = function() {
      return this.mouse_on_container = true;
    };

    AbstractChosen.prototype.mouse_leave = function() {
      return this.mouse_on_container = false;
    };

    AbstractChosen.prototype.input_focus = function(evt) {
      var _this = this;
      if (!this.active_field) {
        return setTimeout((function() {
          return _this.container_mousedown();
        }), 50);
      }
    };

    AbstractChosen.prototype.input_blur = function(evt) {
      var _this = this;
      if (!this.mouse_on_container) {
        this.active_field = false;
        return setTimeout((function() {
          return _this.blur_test();
        }), 100);
      }
    };

    AbstractChosen.prototype.result_add_option = function(option) {
      var classes, style;
      if (!option.disabled) {
        option.dom_id = this.container_id + "_o_" + option.array_index;
        classes = option.selected && this.is_multiple ? [] : ["active-result"];
        if (option.selected) {
          classes.push("result-selected");
        }
        if (option.group_array_index != null) {
          classes.push("group-option");
        }
        if (option.classes !== "") {
          classes.push(option.classes);
        }
        style = option.style.cssText !== "" ? " style=\"" + option.style + "\"" : "";
        return '<li id="' + option.dom_id + '" class="' + classes.join(' ') + '"' + style + '>' + option.html + '</li>';
      } else {
        return "";
      }
    };

    AbstractChosen.prototype.results_update_field = function() {
      if (!this.is_multiple) {
        this.results_reset_cleanup();
      }
      this.result_clear_highlight();
      this.result_single_selected = null;
      return this.results_build();
    };

    AbstractChosen.prototype.results_toggle = function() {
      if (this.results_showing) {
        return this.results_hide();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.results_search = function(evt) {
      if (this.results_showing) {
        return this.winnow_results();
      } else {
        return this.results_show();
      }
    };

    AbstractChosen.prototype.keyup_checker = function(evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      switch (stroke) {
        case 8:
          if (this.is_multiple && this.backstroke_length < 1 && this.choices > 0) {
            return this.keydown_backstroke();
          } else if (!this.pending_backstroke) {
            this.result_clear_highlight();
            return this.results_search();
          }
          break;
        case 13:
          evt.preventDefault();
          if (this.results_showing) {
            return this.result_select(evt);
          }
          break;
        case 27:
          if (this.results_showing) {
            this.results_hide();
          }
          return true;
        case 9:
        case 38:
        case 40:
        case 16:
        case 91:
        case 17:
          break;
        default:
          return this.results_search();
      }
    };

    AbstractChosen.prototype.generate_field_id = function() {
      var new_id;
      new_id = this.generate_random_id();
      this.form_field.id = new_id;
      return new_id;
    };

    AbstractChosen.prototype.generate_random_char = function() {
      var chars, newchar, rand;
      chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
      rand = Math.floor(Math.random() * chars.length);
      return newchar = chars.substring(rand, rand + 1);
    };

    return AbstractChosen;

  })();

  root.AbstractChosen = AbstractChosen;

}).call(this);

/*
Chosen source: generate output using 'cake build'
Copyright (c) 2012 by Inversoft
*/


(function() {
  var Chosen, calculate_position, get_side_border_padding, parse_dimension, root,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  root = this;

  Chosen = (function(_super) {

    __extends(Chosen, _super);

    Chosen.CHOSEN_ANONYMOUS_ID = 1;

    function Chosen(form_field, options) {
      var id;
      this.form_field = form_field;
      this.options = options != null ? options : {};
      this.prime_field = this.form_field instanceof Prime.Dom.Element ? this.form_field : new Prime.Dom.Element(this.form_field);
      id = this.prime_field.getID();
      if ((id != null) || id === "") {
        this.prime_field.setID("chosen_" + Chosen.CHOSEN_ANONYMOUS_ID++);
      }
      this.prime_field.chosen = this;
      this.form_field = this.prime_field.domElement;
      Chosen.__super__.constructor.call(this, this.form_field, this.options);
    }

    Chosen.prototype.setup = function() {
      this.current_value = this.prime_field.getValue();
      this.is_rtl = this.prime_field.hasClass("chzn-rtl");
      return this.allow_custom_value = this.prime_field.hasClass("chzn-custom-value" || this.options.allow_custom_value);
    };

    Chosen.prototype.finish_setup = function() {
      return this.prime_field.addClass("chzn-done");
    };

    Chosen.prototype.set_default_values = function() {
      Chosen.__super__.set_default_values.call(this);
      this.single_temp = new Prime.Dom.Template('<a href="javascript:void(0)" class="chzn-single chzn-default"><span>#{default}</span><div><b></b></div></a><div class="chzn-drop" style="left:-9000px;"><div class="chzn-search"><input type="text" autocomplete="off" /></div><ul class="chzn-results"></ul></div>');
      this.multi_temp = new Prime.Dom.Template('<ul class="chzn-choices"><li class="search-field"><input type="text" value="#{default}" class="default" autocomplete="off" style="width:25px;" /></li></ul><div class="chzn-drop" style="left:-9000px;"><ul class="chzn-results"></ul></div>');
      this.choice_temp = new Prime.Dom.Template('<li class="search-choice" id="#{id}"><span>#{choice}</span><a href="javascript:void(0)" class="search-choice-close" rel="#{position}"></a></li>');
      this.no_results_temp = new Prime.Dom.Template('<li class="no-results">#{message} "<span>#{terms}</span>"</li>');
      this.group_temp = new Prime.Dom.Template('<li id="#{id}" class="group-result" style="display: list-item">#{label}</li>');
      return this.custom_choice_temp = new Prime.Dom.Template('<option value="#{value}" selected="selected">#{value}</option>');
    };

    Chosen.prototype.set_up_html = function() {
      var base_template, container_props, dd_top, dd_width, sf_width;
      this.container_id = this.prime_field.getID().replace(/[^\w]/g, '_') + "_chzn";
      this.f_width = this.prime_field.getStyle("width") ? parseInt(this.prime_field.getStyle("width"), 10) : this.prime_field.getComputedStyle()['width'];
      container_props = {
        'id': this.container_id,
        'class': "chzn-container" + (this.is_rtl ? ' chzn-rtl' : ''),
        'style': 'width: ' + this.f_width + 'px'
      };
      base_template = Prime.Dom.newElement('<div/>', container_props);
      if (this.is_multiple) {
        this.multi_temp.appendTo(base_template, {
          "default": this.default_text
        });
      } else {
        this.single_temp.appendTo(base_template, {
          "default": this.default_text
        });
      }
      base_template.insertAfter(this.prime_field);
      this.prime_field.hide();
      this.container = Prime.Dom.queryByID(this.container_id);
      this.container.addClass("chzn-container-" + (this.is_multiple ? "multi" : "single"));
      this.dropdown = Prime.Dom.queryFirst('div.chzn-drop', this.container);
      dd_top = this.container.getComputedStyle()['height'];
      dd_width = this.f_width - get_side_border_padding(this.dropdown);
      this.dropdown.setStyles({
        "width": dd_width + "px",
        "top": dd_top + "px"
      });
      this.search_field = Prime.Dom.queryFirst('input', this.container);
      this.search_results = Prime.Dom.queryFirst('ul.chzn-results', this.container);
      this.search_field_scale();
      this.search_no_results = Prime.Dom.queryFirst('li.no-results', this.container);
      if (this.is_multiple) {
        this.search_choices = Prime.Dom.queryFirst('ul.chzn-choices', this.container);
        this.search_container = Prime.Dom.queryFirst('li.search-field', this.container);
      } else {
        this.search_container = Prime.Dom.queryFirst('div.chzn-search', this.container);
        this.selected_item = Prime.Dom.queryFirst('.chzn-single', this.container);
        sf_width = dd_width - get_side_border_padding(this.search_container) - get_side_border_padding(this.search_field);
        this.search_field.setStyles({
          "width": sf_width + "px"
        });
      }
      this.results_build();
      this.set_tab_index();
      return this.prime_field.fireEvent("liszt:ready", {
        chosen: this
      });
    };

    Chosen.prototype.register_observers = function() {
      var _this = this;
      this.container.addEventListener("mousedown", function(evt) {
        return _this.container_mousedown(evt);
      });
      this.container.addEventListener("mouseup", function(evt) {
        return _this.container_mouseup(evt);
      });
      this.container.addEventListener("mouseenter", function(evt) {
        return _this.mouse_enter(evt);
      });
      this.container.addEventListener("mouseleave", function(evt) {
        return _this.mouse_leave(evt);
      });
      this.search_results.addEventListener("mouseup", function(evt) {
        return _this.search_results_mouseup(evt);
      });
      this.search_results.addEventListener("mouseover", function(evt) {
        return _this.search_results_mouseover(evt);
      });
      this.search_results.addEventListener("mouseout", function(evt) {
        return _this.search_results_mouseout(evt);
      });
      this.prime_field.addEventListener("liszt:updated", function(evt) {
        return _this.results_update_field(evt);
      });
      this.search_field.addEventListener("blur", function(evt) {
        return _this.input_blur(evt);
      });
      this.search_field.addEventListener("keyup", function(evt) {
        return _this.keyup_checker(evt);
      });
      this.search_field.addEventListener("keydown", function(evt) {
        return _this.keydown_checker(evt);
      });
      if (this.is_multiple) {
        this.search_choices.addEventListener("click", function(evt) {
          return _this.choices_click(evt);
        });
        return this.search_field.addEventListener("focus", function(evt) {
          return _this.input_focus(evt);
        });
      } else {
        return this.container.addEventListener("click", function(evt) {
          return evt.preventDefault();
        });
      }
    };

    Chosen.prototype.prepare_event = function(evt) {
      if (evt.target) {
        return evt.target = new Prime.Dom.Element(evt.target);
      }
    };

    Chosen.prototype.search_field_disabled = function() {
      this.is_disabled = this.prime_field.getAttribute('disabled');
      if (this.is_disabled) {
        this.container.addClass('chzn-disabled');
        this.search_field.domElement.disabled = true;
        if (!this.is_multiple) {
          this.selected_item.removeEventListener("focus");
        }
        return this.close_field();
      } else {
        this.container.removeClass('chzn-disabled');
        this.search_field.domElement.disabled = false;
        if (!this.is_multiple) {
          return this.selected_item.addEventListener("focus", this.activate_action);
        }
      }
    };

    Chosen.prototype.container_mousedown = function(evt) {
      var prime_target, target_closelink;
      prime_target = evt != null ? new Prime.Dom.Element(evt.target) : false;
      if (!this.is_disabled) {
        target_closelink = prime_target ? prime_target.hasClass("search-choice-close") : false;
        if (evt && evt.type === "mousedown" && !this.results_showing) {
          evt.preventDefault;
          evt.stopPropogation;
        }
        if (!this.pending_destroy_click && !target_closelink) {
          if (!this.active_field) {
            if (this.is_multiple) {
              this.search_field.setValue('');
            }
            this.click_test_proxy = Prime.Dom.Document.addEventListener("click", this.click_test_action);
            this.results_show();
          } else if (!this.is_multiple && evt && (prime_target === this.selected_item || Prime.Dom.queryUp("a.chzn-single", prime_target) !== null)) {
            this.results_toggle();
          }
          return this.activate_field();
        } else {
          return this.pending_destroy_click = false;
        }
      }
    };

    Chosen.prototype.container_mouseup = function(evt) {
      if (evt.target.nodeName === "ABBR" && !this.is_disabled) {
        return this.results_reset(evt);
      }
    };

    Chosen.prototype.blur_test = function(evt) {
      if (!this.active_field && this.container.hasClass("chzn-container-active")) {
        return this.close_field();
      }
    };

    Chosen.prototype.close_field = function() {
      Prime.Dom.Document.removeEventListener("click", this.click_test_proxy);
      if (!this.is_multiple) {
        this.selected_item.setAttribute('tabIndex', this.search_field.attribute('tabIndex'));
        this.search_field.setAttribute('tabIndex', -1);
      }
      this.active_field = false;
      this.results_hide();
      this.container.removeClass("chzn-container-active");
      this.winnow_results_clear();
      this.clear_backstroke();
      this.show_search_field_default();
      return this.search_field_scale();
    };

    Chosen.prototype.activate_field = function() {
      if (!this.is_multiple && !this.active_field) {
        this.search_field.setAttribute('tabIndex', this.selected_item.attribute('tabIndex'));
        this.selected_item.setAttribute('tabIndex', -1);
      }
      this.container.addClass("chzn-container-active");
      this.active_field = true;
      this.search_field.setValue(this.search_field.getValue());
      return this.search_field.domElement.focus();
    };

    Chosen.prototype.test_active_click = function(evt) {
      var prime_target;
      prime_target = evt != null ? new Prime.Dom.Element(evt.target) : false;
      if (prime_target && Prime.Dom.queryUp('#' + this.container_id, prime_target) !== null) {
        return this.active_field = true;
      } else {
        return this.close_field();
      }
    };

    Chosen.prototype.results_build = function() {
      var content, data, _i, _len, _ref;
      this.parsing = true;
      this.results_data = root.SelectParser.select_to_array(this.form_field);
      if (this.is_multiple && this.choices > 0) {
        Prime.Dom.query("li.search-choice", this.search_choices).each(function() {
          return this.removeFromDOM();
        });
        this.choices = 0;
      } else if (!this.is_multiple) {
        this.selected_item.addClass("chzn-default");
        Prime.Dom.queryFirst("span", this.selected_item).setHTML(this.default_text);
        if (this.results_data.length <= this.disable_search_threshold) {
          this.container.addClass("chzn-container-single-nosearch");
        } else {
          this.container.removeClass("chzn-container-single-nosearch");
        }
      }
      content = '';
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        if (data.group) {
          content += this.result_add_group(data);
        } else if (!data.empty) {
          content += this.result_add_option(data);
          if (data.selected && this.is_multiple) {
            this.choice_build(data);
          } else if (data.selected && !this.is_multiple) {
            this.selected_item.removeClass("chzn-default");
            Prime.Dom.queryFirst("span", this.selected_item).setHTML(data.html);
            if (this.allow_single_deselect) {
              this.single_deselect_control_build();
            }
          }
        }
      }
      this.search_field_disabled();
      this.show_search_field_default();
      this.search_field_scale();
      this.search_results.setHTML(content);
      return this.parsing = false;
    };

    Chosen.prototype.result_add_group = function(group) {
      if (!group.disabled) {
        group.dom_id = this.container_id + "_g_" + group.array_index;
        return this.group_temp.generate({
          'id': group.dom_id,
          'label': group.label.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')
        });
      } else {
        return "";
      }
    };

    Chosen.prototype.result_do_highlight = function(el) {
      var high_bottom, high_top, maxHeight, styles, visible_bottom, visible_top;
      this.result_clear_highlight();
      this.result_highlight = el;
      this.result_highlight.addClass("highlighted");
      styles = this.search_results.getComputedStyle();
      maxHeight = parseInt(styles['maxHeight'], 10);
      visible_top = this.search_results.domElement.scrollTop;
      visible_bottom = maxHeight + visible_top;
      high_top = calculate_position(this.result_highlight)['top'];
      high_bottom = high_top + parseInt(this.result_highlight.getComputedStyle()['height'], 10);
      if (high_bottom >= visible_bottom) {
        return this.search_results.domElement.scrollTop = (high_bottom - maxHeight) > 0 ? high_bottom - maxHeight : 0;
      } else if (high_top < visible_top) {
        return this.search_results.domElement.scrollTop = high_top;
      }
    };

    Chosen.prototype.result_clear_highlight = function() {
      if (this.result_highlight) {
        this.result_highlight.removeClass('highlighted');
      }
      return this.result_highlight = null;
    };

    Chosen.prototype.results_show = function() {
      var dd_top;
      if (!this.is_multiple) {
        this.selected_item.addClass('chzn-single-with-drop');
        if (this.result_single_selected) {
          this.result_do_highlight(this.result_single_selected);
        }
      } else if (this.max_selected_options <= this.choices) {
        this.prime_field.fireEvent("liszt:maxselected", {
          chosen: this
        });
        return false;
      }
      dd_top = this.is_multiple ? parse_dimension(this.container.getComputedStyle()['height']) : parse_dimension(this.container.getComputedStyle()['height']) - 1;
      this.prime_field.fireEvent("liszt:showing_dropdown", {
        chosen: this
      });
      this.dropdown.setStyles({
        "top": dd_top + "px",
        "left": 0
      });
      this.results_showing = true;
      this.search_field.fireEvent("focus");
      this.search_field.setValue(this.search_field.getValue());
      return this.winnow_results();
    };

    Chosen.prototype.results_hide = function() {
      if (!this.is_multiple) {
        this.selected_item.removeClass('chzn-single-with-drop');
      }
      this.result_clear_highlight();
      this.prime_field.fireEvent("liszt:hiding_dropdown", {
        chosen: this
      });
      this.dropdown.setStyles({
        "left": "-9000px"
      });
      return this.results_showing = false;
    };

    Chosen.prototype.set_tab_index = function(el) {
      var ti;
      if (this.prime_field.getAttribute('tabIndex')) {
        ti = this.prime_field.getAttribute('tabIndex');
        this.prime_field.setAttribute('tabIndex', -1);
        if (this.is_multiple) {
          return this.search_field.setAttribute('tabIndex', ti);
        } else {
          this.selected_item.setAttribute('tabIndex', ti);
          return this.search_field.setAttribute('tabIndex', -1);
        }
      }
    };

    Chosen.prototype.show_search_field_default = function() {
      if (this.is_multiple && this.choices < 1 && !this.active_field) {
        this.search_field.setValue(this.default_text);
        return this.search_field.addClass("default");
      } else {
        this.search_field.setValue('');
        return this.search_field.removeClass("default");
      }
    };

    Chosen.prototype.search_results_mouseup = function(evt) {
      var prime_target, target;
      prime_target = evt != null ? new Prime.Dom.Element(evt.target) : false;
      target = prime_target && prime_target.hasClass("active-result") ? prime_target : Prime.Dom.queryUp(".active-result", prime_target);
      if (prime_target) {
        this.result_highlight = prime_target;
        return this.result_select(evt);
      }
    };

    Chosen.prototype.search_results_mouseover = function(evt) {
      var prime_target, target;
      prime_target = evt != null ? new Prime.Dom.Element(evt.target) : false;
      target = prime_target.hasClass("active-result") ? prime_target : Prime.Dom.queryUp(".active-result", prime_target);
      if (target) {
        return this.result_do_highlight(target);
      }
    };

    Chosen.prototype.search_results_mouseout = function(evt) {
      var prime_target;
      prime_target = evt != null ? new Prime.Dom.Element(evt.target) : false;
      if (prime_target && prime_target.hasClass('active-result') || Prime.Dom.queryUp(".active-result", prime_target)) {
        return this.result_clear_highlight();
      }
    };

    Chosen.prototype.choices_click = function(evt) {
      var prime_target;
      evt.preventDefault();
      prime_target = evt != null ? new Prime.Dom.Element(evt.target) : false;
      if (this.active_field && !(prime_target.hasClass('search-choice') || Prime.Dom.queryUp(".search-choice", prime_target)) && !this.results_showing) {
        return this.results_show();
      }
    };

    Chosen.prototype.choice_build = function(item) {
      var choice_id, link,
        _this = this;
      if (this.is_multiple && this.max_selected_options <= this.choices) {
        this.prime_field.fireEvent("liszt:maxselected", {
          chosen: this
        });
        return false;
      }
      choice_id = this.container_id + "_c_" + item.array_index;
      this.choices += 1;
      this.choice_temp.insertBefore(this.search_container, {
        id: choice_id,
        choice: item.html,
        position: item.array_index
      });
      link = Prime.Dom.queryFirst('li.#' + choice_id + ' a', this.search_choices);
      return link.addEventListener("click", function(evt) {
        return _this.choice_destroy_link_click(evt);
      });
    };

    Chosen.prototype.choice_destroy_link_click = function(evt) {
      var prime_target;
      prime_target = evt != null ? new Prime.Dom.Element(evt.target) : false;
      evt.preventDefault();
      if (!this.is_disabled) {
        this.pending_destroy_click = true;
        return this.choice_destroy(prime_target);
      }
    };

    Chosen.prototype.choice_destroy = function(link) {
      this.choices -= 1;
      this.show_search_field_default();
      if (this.is_multiple && this.choices > 0 && this.search_field.getValue().length < 1) {
        this.results_hide();
      }
      this.result_deselect(link.getAttribute("rel"));
      return Prime.Dom.queryUp('li', link).removeFromDOM();
    };

    Chosen.prototype.results_reset = function() {
      this.form_field.options[0].selected = true;
      Prime.Dom.queryFirst("span", this.selected_item).setHTML(this.default_text);
      if (!this.is_multiple) {
        this.selected_item.addClass("chzn-default");
      }
      this.show_search_field_default();
      this.results_reset_cleanup();
      this.prime_field.fireEvent("change");
      if (this.active_field) {
        return this.results_hide();
      }
    };

    Chosen.prototype.results_reset_cleanup = function() {
      var deselect_trigger;
      deselect_trigger = Prime.Dom.queryFirst("abbr", this.selected_item);
      if (deselect_trigger) {
        return deselect_trigger.removeFromDOM();
      }
    };

    Chosen.prototype.result_select = function(evt) {
      var group, high, item, position, value;
      if (this.result_highlight) {
        high = this.result_highlight;
        this.result_clear_highlight();
        if (this.is_multiple) {
          this.result_deactivate(high);
        } else {
          Prime.Dom.query(".result-selected", this.search_results).each(function(index) {
            return this.removeClass("result-selected");
          });
          this.selected_item.removeClass("chzn-default");
          this.result_single_selected = high;
        }
        high.addClass("result-selected");
        position = high.getID().substr(high.getID().lastIndexOf("_") + 1);
        item = this.results_data[position];
        item.selected = true;
        this.form_field.options[item.options_index].selected = true;
        if (this.is_multiple) {
          this.choice_build(item);
        } else {
          Prime.Dom.queryFirst("span", this.selected_item).setHTML(item.html);
          if (this.allow_single_deselect) {
            this.single_deselect_control_build();
          }
        }
        if (!(evt.metaKey && this.is_multiple)) {
          this.results_hide();
        }
        this.search_field.setValue("");
        if (typeof Event.simulate === 'function' && (this.is_multiple || this.prime_field.getValue() !== this.current_value)) {
          this.prime_field.fireEvent("change");
        }
        this.current_value = this.prime_field.getValue();
        return this.search_field_scale();
      } else if (this.allow_custom_value) {
        value = this.search_field.getValue();
        group = this.add_unique_custom_group();
        this.custom_choice_temp.appendTo(group, {
          'value': value
        });
        if (group.parent() === null) {
          group.appendTo(this.prime_field);
        }
        if (!evt.metaKey) {
          this.results_hide();
        }
        return this.results_build();
      }
    };

    Chosen.prototype.find_custom_group = function() {
      var found, group, _i, _len, _ref;
      _ref = Prime.Dom.query('optgroup', this.prime_field);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        group = _ref[_i];
        if (group.getAttribute('label') === this.custom_group_text) {
          found = group;
        }
      }
      return found;
    };

    Chosen.prototype.add_unique_custom_group = function() {
      var group;
      group = this.find_custom_group();
      if (!group) {
        group = Prime.Dom.newElement('<optgroup/>', {
          'label': this.custom_group_text
        });
      }
      return group;
    };

    Chosen.prototype.result_activate = function(el) {
      return el.addClass("active-result");
    };

    Chosen.prototype.result_deactivate = function(el) {
      return el.removeClass("active-result");
    };

    Chosen.prototype.result_deselect = function(pos) {
      var result, result_data;
      result_data = this.results_data[pos];
      result_data.selected = false;
      this.form_field.options[result_data.options_index].selected = false;
      result = Prime.Dom.queryByID(this.container_id + "_o_" + pos);
      result.removeClass("result-selected").addClass("active-result").show();
      this.result_clear_highlight();
      this.winnow_results();
      if (typeof Event.simulate === 'function') {
        this.prime_field.fireEvent("change");
      }
      return this.search_field_scale();
    };

    Chosen.prototype.single_deselect_control_build = function() {
      if (this.allow_single_deselect && !Prime.Dom.queryFirst("abbr", this.selected_item)) {
        return Prime.Dom.newElement("<abbr/>", {
          'class': 'search-choice-close'
        }).appendTo(Prime.Dom.queryFirst("span", this.selected_item));
      }
    };

    Chosen.prototype.winnow_results = function() {
      var el, found, option, part, parts, regex, regexAnchor, result_id, results, searchText, startpos, text, zregex, _i, _j, _len, _len1, _ref;
      this.no_results_clear();
      results = 0;
      searchText = this.search_field.getValue() === this.default_text ? "" : this.search_field.getValue().replace(/^\s+/, '').replace(/\s+$/, '').replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
      regexAnchor = this.search_contains ? "" : "^";
      regex = new RegExp(regexAnchor + searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      zregex = new RegExp(searchText.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&"), 'i');
      _ref = this.results_data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        option = _ref[_i];
        if (!option.disabled && !option.empty) {
          if (option.group) {
            Prime.Dom.queryByID(option.dom_id).hide();
          } else if (!(this.is_multiple && option.selected)) {
            found = false;
            result_id = option.dom_id;
            el = Prime.Dom.queryByID(result_id);
            if (regex.test(option.html)) {
              found = true;
              results += 1;
            } else if (option.html.indexOf(" ") >= 0 || option.html.indexOf("[") === 0) {
              parts = option.html.replace(/\[|\]/g, "").split(" ");
              if (parts.length) {
                for (_j = 0, _len1 = parts.length; _j < _len1; _j++) {
                  part = parts[_j];
                  if (regex.test(part)) {
                    found = true;
                    results += 1;
                  }
                }
              }
            }
            if (found) {
              if (searchText.length) {
                startpos = option.html.search(zregex);
                text = option.html.substr(0, startpos + searchText.length) + '</em>' + option.html.substr(startpos + searchText.length);
                text = text.substr(0, startpos) + '<em>' + text.substr(startpos);
              } else {
                text = option.html;
              }
              el.setHTML(text);
              this.result_activate(el);
              if (option.group_array_index != null) {
                Prime.Dom.queryByID(this.results_data[option.group_array_index].dom_id).setStyle('display', 'list-item');
              }
            } else {
              if ((this.result_highlight != null) && option.dom_id === this.result_highlight.getID()) {
                this.result_clear_highlight();
              }
              this.result_deactivate(el);
            }
          }
        }
      }
      if (results < 1 && searchText.length) {
        return this.no_results(searchText);
      } else {
        return this.winnow_results_set_highlight();
      }
    };

    Chosen.prototype.winnow_results_clear = function() {
      var li, lis, _i, _len, _results;
      this.search_field.setValue('');
      lis = Prime.Dom.query("li", this.search_results);
      _results = [];
      for (_i = 0, _len = lis.length; _i < _len; _i++) {
        li = lis[_i];
        if (li.hasClass("group-result")) {
          _results.push(li.show());
        } else if (!this.is_multiple || !li.hasClass("result-selected")) {
          _results.push(this.result_activate(li));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Chosen.prototype.winnow_results_set_highlight = function() {
      var do_high;
      if (!this.result_highlight) {
        if (!this.is_multiple) {
          do_high = Prime.Dom.queryFirst(".result-selected.active-result", this.search_results);
        }
        if (!(do_high != null)) {
          do_high = Prime.Dom.queryFirst(".active-result", this.search_results);
        }
        if (do_high != null) {
          return this.result_do_highlight(do_high);
        }
      }
    };

    Chosen.prototype.no_results = function(terms) {
      return this.no_results_temp.appendTo(this.search_results, {
        'terms': terms,
        'message': this.results_none_found
      });
    };

    Chosen.prototype.no_results_clear = function() {
      var nr;
      nr = null;
      return Prime.Dom.query(".no-results", this.search_results).each(function() {
        return this.removeFromDOM();
      });
    };

    Chosen.prototype.keydown_arrow = function() {
      var actives, idx;
      actives = Prime.Dom.query("li.active-result", this.search_results);
      if (actives.length) {
        if (!this.result_highlight) {
          this.result_do_highlight(actives[0]);
        } else if (this.results_showing) {
          idx = actives.indexOf(this.result_highlight);
          if (idx < actives.length - 1) {
            this.result_do_highlight(actives[idx + 1]);
          }
        }
        if (!this.results_showing) {
          return this.results_show();
        }
      }
    };

    Chosen.prototype.keyup_arrow = function() {
      var actives, idx;
      if (!this.results_showing && !this.is_multiple) {
        return this.results_show();
      } else if (this.result_highlight) {
        actives = Prime.Dom.query("li.active-result", this.search_results);
        idx = actives.indexOf(this.result_highlight);
        if (idx > 0) {
          return this.result_do_highlight(actives[idx - 1]);
        } else {
          if (this.choices > 0) {
            this.results_hide();
          }
          return this.result_clear_highlight();
        }
      }
    };

    Chosen.prototype.keydown_backstroke = function() {
      var siblings;
      if (this.pending_backstroke) {
        this.choice_destroy(Prime.Dom.queryFirst("a", this.pending_backstroke));
        return this.clear_backstroke();
      } else {
        siblings = Prime.Dom.query("li.search-choice", this.search_container.parent());
        this.pending_backstroke = siblings[siblings.length - 1];
        if (this.single_backstroke_delete) {
          return this.keydown_backstroke();
        } else {
          return this.pending_backstroke.addClass("search-choice-focus");
        }
      }
    };

    Chosen.prototype.clear_backstroke = function() {
      if (this.pending_backstroke) {
        this.pending_backstroke.removeClass("search-choice-focus");
      }
      return this.pending_backstroke = null;
    };

    Chosen.prototype.keydown_checker = function(evt) {
      var stroke, _ref;
      stroke = (_ref = evt.which) != null ? _ref : evt.keyCode;
      this.search_field_scale();
      if (stroke !== 8 && this.pending_backstroke) {
        this.clear_backstroke();
      }
      switch (stroke) {
        case 8:
          this.backstroke_length = this.search_field.getValue().length;
          break;
        case 9:
          if (this.results_showing && !this.is_multiple) {
            this.result_select(evt);
          }
          this.mouse_on_container = false;
          break;
        case 13:
          evt.preventDefault();
          break;
        case 38:
          evt.preventDefault();
          this.keyup_arrow();
          break;
        case 40:
          this.keydown_arrow();
          break;
      }
    };

    Chosen.prototype.search_field_scale = function() {
      var comp, dd_top, div, style, style_block, styles, w, _i, _len;
      if (this.is_multiple) {
        w = 0;
        style_block = "position:absolute; left: -1000px; top: -1000px; visibility:hidden;";
        styles = ['font-size', 'font-style', 'font-weight', 'font-family', 'line-height', 'text-transform', 'letter-spacing'];
        for (_i = 0, _len = styles.length; _i < _len; _i++) {
          style = styles[_i];
          style_block += style + ":" + this.search_field.getStyle(style) + ";";
        }
        div = Prime.Dom.newElement('<div/>', {
          'style': style_block
        }).setHTML(this.search_field.getValue().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;'));
        div.appendTo(Prime.Dom.queryFirst('body'));
        comp = div.getComputedStyle();
        w = parse_dimension(comp['width']) + parse_dimension(comp['paddingLeft']) + parse_dimension(comp['paddingRight']) + parse_dimension(comp['borderLeftWidth']) + parse_dimension(comp['borderRightWidth']) + 25;
        div.removeFromDOM();
        if (w > this.f_width - 10) {
          w = this.f_width - 10;
        }
        this.search_field.setStyles({
          'width': w + 'px'
        });
        dd_top = this.container.getComputedStyle()['height'];
        return this.dropdown.setStyles({
          "top": dd_top + "px"
        });
      }
    };

    return Chosen;

  })(AbstractChosen);

  root.Chosen = Chosen;

  get_side_border_padding = function(elmt) {
    var layout, side_border_padding;
    layout = elmt.getComputedStyle();
    return side_border_padding = parse_dimension(layout["borderLeftWidth"]) + parse_dimension(layout["borderRightWidth"]) + parse_dimension(layout["paddingLeft"]) + parse_dimension(layout["paddingRight"]);
  };

  calculate_position = function(elmt) {
    var element, position, positionLeft, positionTop, styles;
    styles = elmt.getComputedStyle();
    positionLeft = parseInt(elmt.domElement.offsetLeft, 10) - parseInt(styles['margin-left'], 10);
    positionTop = parseInt(elmt.domElement.offsetTop, 10) - parseInt(styles['margin-top'], 10);
    element = elmt.parent();
    while ((element != null)) {
      position = element.getComputedStyle()['position'];
      if (element.type === 'body' || (position === 'relative' || position === 'absolute')) {
        break;
      } else {
        positionLeft += parseInt(element.offsetLeft, 10);
        positionTop += parseInt(element.offsetTop, 10);
      }
      element = element.parent();
    }
    return {
      'top': positionTop,
      'left': positionLeft
    };
  };

  parse_dimension = function(dim) {
    if (dim.indexOf("px") > 0) {
      return parseInt(dim.substring(0, dim.indexOf("px")), 10);
    } else {
      return parseInt(dim, 10);
    }
  };

  root.get_side_border_padding = get_side_border_padding;

  root.calculate_position = calculate_position;

  root.parse_dimension = parse_dimension;

}).call(this);
